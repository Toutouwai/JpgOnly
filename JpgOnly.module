<?php
namespace ProcessWire;
/**
 *
 * JPG Only
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class JpgOnly extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => "JPG Only",
			'version' => '0.0.1',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/JpgOnly',
			'summary' => 'Converts PNG and GIF images to JPG format on upload.',
			'icon' => 'file-image-o',
			'autoload' => true,
		);
	}

	/**
	 * Construct
	 */
	public function __construct() {
		// Default config
		$this->default_quality = 90;
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('InputfieldImage::fileAdded', $this, 'imageUploaded');
		//$this->addHookBefore('Pageimage::install', $this, 'piInstall');
	}

	/**
	 * Convert image to JPG format
	 *
	 * @param HookEvent $event
	 */
	public function imageUploaded(HookEvent $event) {
		/* @var Pageimage $pageimage */
		$pageimage = $event->arguments(0);
		$inputfield = $event->object;
		$page = $inputfield->hasPage;
		$field = $inputfield->hasField;

		// Get the quality setting to use for the conversion
		$quality = $this->___conversionQuality($pageimage, $page, $field);
		// If false then no conversion to be done
		if($quality === false) return;
		// Make Pageimage from converted image
		$new_pageimage = new Pageimage($pageimage->pagefiles, $this->imgToJpg($pageimage->filename));
		$event->arguments(0, $new_pageimage);
	}

	/**
	 * Determine the conversion quality, or if the conversion should be done at all
	 * This method only exists for the purpose of being hooked
	 *
	 * @param Pageimage $pageimage The Pageimage to be added
	 * @param Page $page The page the image will be added to
	 * @param Field $field The field the image will be added to
	 * @return int|bool The quality setting for the JPG conversion, or false for no conversion
	 *
	 */
	public function ___conversionQuality($pageimage, $page, $field) {
		return $this->default_quality;
	}

	/**
	 * Convert image to JPG format
	 *
	 * @param string $filename Full path and filename of image, or URL to image
	 * @param int $quality The quality setting for the JPG conversion
	 * @return string Full path to JPG conversion
	 * @throws WireException
	 */
	public function imgToJpg($filename, $quality = null) {

		// Filename is required
		if(!is_string($filename) || !$filename) throw new WireException('JpgOnly::imgToJpg requires a full path or URL to an image.');
		// Use default quality if none passed in
		if(!$quality) $quality = $this->default_quality;

		$path_parts = pathinfo($filename);
		// File extension is required
		if(!isset($path_parts['extension'])) throw new WireException('JpgOnly::imgToJpg requires that images have a file extension.');
		$ext = strtolower($path_parts['extension']);
		if($ext === 'png') {
			// PNG
			$image_top = imagecreatefrompng($filename);
			$image = imagecreatetruecolor(imagesx($image_top), imagesy($image_top));
			imagefill($image, 0, 0, imagecolorallocate($image, 255, 255, 255));
			imagealphablending($image, true);
			imagecopy($image, $image_top, 0, 0, 0, 0, imagesx($image_top), imagesy($image_top));
			imagedestroy($image_top);
		} elseif($ext === 'gif') {
			// GIF
			$image = imagecreatefromgif($filename);
		} else {
			// Already a JPG or a format this module cannot convert
			return $filename;
		}

		// Use temp directory if image is remote
		if(strpos($filename, '://') !== false) {
			$temp_dir = $this->files->tempDir('imgToJpg');
			$new_filename = $temp_dir . $path_parts['basename'] . '.jpg';
		} else {
			$new_filename = $filename . '.jpg';
		}

		imagejpeg($image, $new_filename, $quality);
		imagedestroy($image);
		return $new_filename;

	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {

		/* @var InputfieldInteger $f */
		$f = $this->modules->InputfieldInteger;
		$f_name = 'default_quality';
		$f->name = $f_name;
		$f->label = $this->_('Default quality for JPG conversions');
		$f->value = $this->$f_name;
		$inputfields->add($f);

	}

}
